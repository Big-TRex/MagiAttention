import unittest
from unittest import TestCase

from zeus.common.ranges import AttnRanges, find_hole_ranges_new


class TestFindHoleRanges(TestCase):
    def test_find_hole_ranges_case1(self):
        ranges1 = AttnRanges.from_ranges([(0, 10), (20, 30), (40, 50)])
        ranges2 = AttnRanges.from_ranges([(5, 25), (35, 45)])
        hole_ranges = find_hole_ranges_new(ranges1, ranges2)
        self.assertEqual(
            hole_ranges, AttnRanges.from_ranges([(0, 5), (25, 30), (45, 50)])
        )

    def test_find_hole_ranges_case2(self):
        ranges1 = AttnRanges.from_ranges(
            [
                [0, 28800],
                [0, 28800],
                [0, 28800],
                [0, 57600],
                [0, 57600],
                [0, 57600],
                [0, 57600],
                [0, 86400],
                [0, 86400],
                [0, 86400],
                [0, 115200],
                [0, 115200],
                [0, 115200],
                [0, 115200],
                [115200, 144000],
                [115200, 144000],
                [115200, 144000],
                [115200, 144000],
                [144000, 172800],
                [144000, 172800],
                [144000, 172800],
                [144000, 172800],
                [172800, 201600],
                [172800, 201600],
                [172800, 201600],
                [201600, 230400],
                [201600, 230400],
                [201600, 230400],
                [201600, 230400],
                [201600, 230400],
                [230400, 234040],
                [230400, 234040],
                [234040, 237680],
            ]
        )
        ranges2 = AttnRanges.from_ranges(
            [
                [4096, 6144],
                [12288, 14336],
                [20480, 22528],
                [30720, 32768],
                [38912, 40960],
                [49152, 51200],
                [57344, 57600],
                [57600, 59392],
                [77824, 79872],
                [83968, 86016],
                [92160, 94208],
                [94208, 96256],
                [104448, 106496],
                [112640, 114688],
                [118784, 120832],
                [120832, 122880],
                [131072, 133120],
                [139264, 141312],
                [147456, 149504],
                [149504, 151552],
                [157696, 159744],
                [165888, 167936],
                [182272, 184320],
                [186368, 188416],
                [194560, 196608],
                [202752, 204800],
                [210944, 212992],
                [219136, 221184],
                [227328, 229376],
                [229376, 230400],
                [230400, 231424],
                [233472, 234040],
                [234040, 235520],
            ]
        )
        hole_ranges = find_hole_ranges_new(ranges1, ranges2)
        self.assertEqual(
            hole_ranges,
            AttnRanges.from_ranges(
                [
                    [0, 4096],
                    [6144, 12288],
                    [14336, 20480],
                    [22528, 30720],
                    [32768, 38912],
                    [40960, 49152],
                    [51200, 57344],
                    [59392, 77824],
                    [79872, 83968],
                    [86016, 92160],
                    [96256, 104448],
                    [106496, 112640],
                    [114688, 118784],
                    [122880, 131072],
                    [133120, 139264],
                    [141312, 147456],
                    [151552, 157696],
                    [159744, 165888],
                    [167936, 182272],
                    [184320, 186368],
                    [188416, 194560],
                    [196608, 202752],
                    [204800, 210944],
                    [212992, 219136],
                    [221184, 227328],
                    [231424, 233472],
                    [235520, 237680],
                ]
            ),
        )


if __name__ == "__main__":
    unittest.main()
