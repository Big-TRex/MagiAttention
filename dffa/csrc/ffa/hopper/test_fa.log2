Running 240 items in this shard
q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 1
Fq_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 1
Fq_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 1
Fq_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 1
Fq_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 1
Fq_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 139 / 65536 (0.2%)
Greatest absolute difference: 0.0625 at index (57, 0, 126) (up to 0.0078125 allowed)
Greatest relative difference: 2.8125 at index (63, 0, 110) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 114 / 65536 (0.2%)
Greatest absolute difference: 0.0625 at index (57, 0, 112) (up to 0.0078125 allowed)
Greatest relative difference: 2.625 at index (63, 1, 102) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 177 / 65536 (0.3%)
Greatest absolute difference: 0.0625 at index (57, 1, 46) (up to 0.0078125 allowed)
Greatest relative difference: 8.125 at index (59, 0, 9) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 170 / 65536 (0.3%)
Greatest absolute difference: 0.0625 at index (57, 0, 101) (up to 0.0078125 allowed)
Greatest relative difference: 0.71484375 at index (60, 1, 29) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 252 / 65536 (0.4%)
Greatest absolute difference: 0.125 at index (60, 0, 21) (up to 0.0078125 allowed)
Greatest relative difference: 2.453125 at index (58, 0, 118) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 222 / 65536 (0.3%)
Greatest absolute difference: 0.125 at index (57, 1, 73) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (58, 1, 11) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 263 / 65536 (0.4%)
Greatest absolute difference: 0.125 at index (57, 0, 59) (up to 0.0078125 allowed)
Greatest relative difference: 2.765625 at index (57, 1, 94) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 245 / 65536 (0.4%)
Greatest absolute difference: 0.125 at index (57, 1, 28) (up to 0.0078125 allowed)
Greatest relative difference: 0.8515625 at index (62, 0, 96) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 13


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 72 / 141056 (0.1%)
Greatest absolute difference: 0.03125 at index (116, 1, 22) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (126, 1, 96) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 86 / 141056 (0.1%)
Greatest absolute difference: 0.03125 at index (114, 1, 15) (up to 0.0078125 allowed)
Greatest relative difference: 2.40625 at index (121, 0, 69) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 13


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 169 / 141056 (0.1%)
Greatest absolute difference: 0.03125 at index (115, 1, 105) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (121, 0, 127) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 165 / 141056 (0.1%)
Greatest absolute difference: 0.0625 at index (115, 0, 39) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (121, 1, 75) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 13


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 323 / 141056 (0.2%)
Greatest absolute difference: 0.0625 at index (116, 1, 38) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (119, 1, 96) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 275 / 141056 (0.2%)
Greatest absolute difference: 0.0625 at index (116, 1, 62) (up to 0.0078125 allowed)
Greatest relative difference: 2.625 at index (116, 0, 91) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 13


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 350 / 141056 (0.2%)
Greatest absolute difference: 0.0625 at index (115, 0, 6) (up to 0.0078125 allowed)
Greatest relative difference: 2.1875 at index (123, 1, 53) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 323 / 141056 (0.2%)
Greatest absolute difference: 0.0625 at index (116, 0, 72) (up to 0.0078125 allowed)
Greatest relative difference: 4.28125 at index (122, 1, 12) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 12 / 315904 (0.0%)
Greatest absolute difference: 0.0234375 at index (238, 1, 126) (up to 0.0078125 allowed)
Greatest relative difference: 0.1630859375 at index (230, 1, 10) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 13 / 315904 (0.0%)
Greatest absolute difference: 0.015625 at index (237, 1, 118) (up to 0.0078125 allowed)
Greatest relative difference: 1.2265625 at index (243, 1, 0) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 55 / 315904 (0.0%)
Greatest absolute difference: 0.0234375 at index (228, 0, 89) (up to 0.0078125 allowed)
Greatest relative difference: 1.3359375 at index (229, 0, 10) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 79 / 315904 (0.0%)
Greatest absolute difference: 0.03125 at index (237, 1, 118) (up to 0.0078125 allowed)
Greatest relative difference: 1.15625 at index (237, 1, 36) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 189 / 315904 (0.1%)
Greatest absolute difference: 0.03125 at index (229, 0, 34) (up to 0.0078125 allowed)
Greatest relative difference: 2.171875 at index (248, 1, 93) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 218 / 315904 (0.1%)
Greatest absolute difference: 0.0625 at index (230, 0, 55) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (235, 0, 72) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 321 / 315904 (0.1%)
Greatest absolute difference: 0.0390625 at index (241, 0, 69) (up to 0.0078125 allowed)
Greatest relative difference: 5.4375 at index (231, 0, 57) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 359 / 315904 (0.1%)
Greatest absolute difference: 0.0625 at index (243, 1, 108) (up to 0.0078125 allowed)
Greatest relative difference: 6.90625 at index (235, 1, 21) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 511744 (0.0%)
Greatest absolute difference: 0.0081787109375 at index (1336, 0, 0) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (1336, 0, 0) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 7 / 511744 (0.0%)
Greatest absolute difference: 0.01171875 at index (1344, 1, 2) (up to 0.0078125 allowed)
Greatest relative difference: 0.546875 at index (1417, 1, 93) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 511744 (0.0%)
Greatest absolute difference: 0.01171875 at index (1370, 1, 119) (up to 0.0078125 allowed)
Greatest relative difference: 2.109375 at index (1348, 0, 86) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 2559744 (0.0%)
Greatest absolute difference: 0.00830078125 at index (1847, 1, 95) (up to 0.0078125 allowed)
Greatest relative difference: 0.1845703125 at index (1847, 1, 95) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 4096 (0.1%)
Greatest absolute difference: 0.01953125 at index (7, 1, 17) (up to 0.0078125 allowed)
Greatest relative difference: 2.421875 at index (8, 0, 89) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 4096 (0.2%)
Greatest absolute difference: 0.01953125 at index (8, 0, 14) (up to 0.0078125 allowed)
Greatest relative difference: 0.1923828125 at index (9, 1, 120) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 393216 (0.0%)
Greatest absolute difference: 0.0107421875 at index (389, 0, 112) (up to 0.0078125 allowed)
Greatest relative difference: 0.044189453125 at index (389, 0, 112) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 154 / 4096 (3.8%)
Greatest absolute difference: 0.125 at index (9, 0, 34) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (8, 0, 99) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 143 / 4096 (3.5%)
Greatest absolute difference: 0.09375 at index (9, 0, 29) (up to 0.0078125 allowed)
Greatest relative difference: 1.5625 at index (8, 0, 62) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 846336 (0.0%)
Greatest absolute difference: 0.0107421875 at index (389, 0, 112) (up to 0.0078125 allowed)
Greatest relative difference: 0.6875 at index (1063, 1, 99) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 230 / 4096 (5.6%)
Greatest absolute difference: 0.125 at index (7, 1, 6) (up to 0.0078125 allowed)
Greatest relative difference: 0.90625 at index (9, 1, 12) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 213 / 4096 (5.2%)
Greatest absolute difference: 0.125 at index (7, 0, 65) (up to 0.0078125 allowed)
Greatest relative difference: 1.75 at index (9, 1, 108) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 51 / 1895424 (0.0%)
Greatest absolute difference: 0.013671875 at index (1530, 3, 101) (up to 0.0078125 allowed)
Greatest relative difference: 5.0 at index (2129, 0, 61) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 310 / 4096 (7.6%)
Greatest absolute difference: 0.15625 at index (8, 1, 113) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (10, 1, 12) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 298 / 4096 (7.3%)
Greatest absolute difference: 0.25 at index (7, 1, 79) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (7, 0, 39) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3,  4],
        [ 8, 12]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4
Fq_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 380


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 9 / 131072 (0.0%)
Greatest absolute difference: 0.015625 at index (282, 1, 63) (up to 0.0078125 allowed)
Greatest relative difference: 8.5 at index (334, 0, 23) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 20 / 131072 (0.0%)
Greatest absolute difference: 0.012939453125 at index (336, 0, 12) (up to 0.0078125 allowed)
Greatest relative difference: 2.640625 at index (325, 1, 100) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 380


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 88 / 131072 (0.1%)
Greatest absolute difference: 0.017578125 at index (284, 0, 127) (up to 0.0078125 allowed)
Greatest relative difference: 21.375 at index (303, 1, 26) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 94 / 131072 (0.1%)
Greatest absolute difference: 0.0234375 at index (289, 0, 37) (up to 0.0078125 allowed)
Greatest relative difference: 1.8671875 at index (284, 1, 52) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 63


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 410 / 131072 (0.3%)
Greatest absolute difference: 0.125 at index (124, 1, 68) (up to 0.0078125 allowed)
Greatest relative difference: 5.28125 at index (122, 1, 45) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 403 / 131072 (0.3%)
Greatest absolute difference: 0.125 at index (122, 0, 19) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (114, 0, 81) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254],
        [563, 814]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 251


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 402 / 282112 (0.1%)
Greatest absolute difference: 0.0625 at index (237, 0, 11) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (243, 0, 112) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 422 / 282112 (0.1%)
Greatest absolute difference: 0.0625 at index (232, 0, 92) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (238, 1, 89) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  508],
        [1126, 1628]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 502


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 214 / 631808 (0.0%)
Greatest absolute difference: 0.03125 at index (465, 1, 50) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (458, 1, 97) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 230 / 631808 (0.0%)
Greatest absolute difference: 0.03125 at index (463, 0, 70) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (480, 0, 38) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  559],
        [3037, 3319]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 282


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 24 / 1023488 (0.0%)
Greatest absolute difference: 0.015625 at index (535, 1, 92) (up to 0.0078125 allowed)
Greatest relative difference: 20.75 at index (540, 0, 107) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 19 / 1023488 (0.0%)
Greatest absolute difference: 0.015625 at index (530, 1, 3) (up to 0.0078125 allowed)
Greatest relative difference: 2.40625 at index (485, 1, 121) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3648,  4058],
        [ 9012, 13025]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 65536 (0.0%)
Greatest absolute difference: 0.01171875 at index (57, 0, 23) (up to 0.0078125 allowed)
Greatest relative difference: 0.8515625 at index (57, 0, 55) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 65536 (0.0%)
Greatest absolute difference: 0.013671875 at index (57, 0, 10) (up to 0.0078125 allowed)
Greatest relative difference: 0.0269775390625 at index (57, 0, 10) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 65536 (0.0%)
Greatest absolute difference: 0.00927734375 at index (58, 0, 47) (up to 0.0078125 allowed)
Greatest relative difference: 0.1533203125 at index (58, 0, 47) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 65536 (0.0%)
Greatest absolute difference: 0.01123046875 at index (57, 1, 87) (up to 0.0078125 allowed)
Greatest relative difference: 0.130859375 at index (57, 1, 87) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 65536 (0.0%)
Greatest absolute difference: 0.0087890625 at index (57, 1, 86) (up to 0.0078125 allowed)
Greatest relative difference: 0.1201171875 at index (57, 1, 86) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 7


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 65536 (0.0%)
Greatest absolute difference: 0.01171875 at index (58, 0, 26) (up to 0.0078125 allowed)
Greatest relative difference: 0.0262451171875 at index (58, 0, 26) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 13


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 196608 (0.0%)
Greatest absolute difference: 0.0107421875 at index (245, 1, 60) (up to 0.0078125 allowed)
Greatest relative difference: 0.365234375 at index (245, 1, 125) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 141056 (0.0%)
Greatest absolute difference: 0.01171875 at index (114, 0, 93) (up to 0.0078125 allowed)
Greatest relative difference: 2.3125 at index (114, 0, 41) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 141056 (0.0%)
Greatest absolute difference: 0.0087890625 at index (117, 1, 39) (up to 0.0078125 allowed)
Greatest relative difference: 0.08447265625 at index (117, 1, 39) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 13


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 141056 (0.0%)
Greatest absolute difference: 0.009765625 at index (115, 0, 80) (up to 0.0078125 allowed)
Greatest relative difference: 0.049560546875 at index (115, 0, 80) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 141056 (0.0%)
Greatest absolute difference: 0.03125 at index (114, 1, 83) (up to 0.0078125 allowed)
Greatest relative difference: 0.3671875 at index (115, 0, 94) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 13


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 4 / 141056 (0.0%)
Greatest absolute difference: 0.0234375 at index (115, 1, 60) (up to 0.0078125 allowed)
Greatest relative difference: 0.140625 at index (115, 1, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 13


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 141056 (0.0%)
Greatest absolute difference: 0.01171875 at index (114, 0, 116) (up to 0.0078125 allowed)
Greatest relative difference: 0.09619140625 at index (115, 1, 24) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.0126953125 at index (228, 0, 87) (up to 0.0078125 allowed)
Greatest relative difference: 0.375 at index (228, 0, 84) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 315904 (0.0%)
Greatest absolute difference: 0.0146484375 at index (228, 0, 121) (up to 0.0078125 allowed)
Greatest relative difference: 0.4375 at index (228, 1, 9) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.0107421875 at index (228, 1, 1) (up to 0.0078125 allowed)
Greatest relative difference: 0.474609375 at index (228, 0, 87) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 4 / 315904 (0.0%)
Greatest absolute difference: 0.03125 at index (228, 0, 45) (up to 0.0078125 allowed)
Greatest relative difference: 0.1103515625 at index (229, 0, 113) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 26


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 315904 (0.0%)
Greatest absolute difference: 0.009765625 at index (229, 1, 9) (up to 0.0078125 allowed)
Greatest relative difference: 0.05810546875 at index (229, 1, 9) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 26


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 315904 (0.0%)
Greatest absolute difference: 0.01123046875 at index (228, 0, 31) (up to 0.0078125 allowed)
Greatest relative difference: 0.1435546875 at index (228, 0, 31) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 511744 (0.0%)
Greatest absolute difference: 0.009765625 at index (1311, 0, 86) (up to 0.0078125 allowed)
Greatest relative difference: 0.09912109375 at index (1311, 0, 86) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 511744 (0.0%)
Greatest absolute difference: 0.015625 at index (1309, 0, 78) (up to 0.0078125 allowed)
Greatest relative difference: 0.8125 at index (1309, 0, 8) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 511744 (0.0%)
Greatest absolute difference: 0.01025390625 at index (1311, 0, 40) (up to 0.0078125 allowed)
Greatest relative difference: 0.08056640625 at index (1311, 0, 40) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 7 / 511744 (0.0%)
Greatest absolute difference: 0.015625 at index (1309, 0, 92) (up to 0.0078125 allowed)
Greatest relative difference: 0.150390625 at index (1309, 0, 35) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 511744 (0.0%)
Greatest absolute difference: 0.01171875 at index (1309, 0, 71) (up to 0.0078125 allowed)
Greatest relative difference: 0.0712890625 at index (1309, 0, 71) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 511744 (0.0%)
Greatest absolute difference: 0.00830078125 at index (1309, 0, 95) (up to 0.0078125 allowed)
Greatest relative difference: 0.1513671875 at index (1309, 0, 95) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 115


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 511744 (0.0%)
Greatest absolute difference: 0.01171875 at index (1309, 0, 79) (up to 0.0078125 allowed)
Greatest relative difference: 1.5 at index (1309, 0, 79) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 2559744 (0.0%)
Greatest absolute difference: 0.0126953125 at index (1824, 0, 77) (up to 0.0078125 allowed)
Greatest relative difference: 0.12060546875 at index (1824, 0, 77) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 7 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (1824, 0, 52) (up to 0.0078125 allowed)
Greatest relative difference: 0.22265625 at index (1824, 1, 83) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 2559744 (0.0%)
Greatest absolute difference: 0.009765625 at index (1826, 0, 51) (up to 0.0078125 allowed)
Greatest relative difference: 0.609375 at index (1825, 0, 28) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 4 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (1824, 0, 37) (up to 0.0078125 allowed)
Greatest relative difference: 1.484375 at index (1825, 1, 55) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (1827, 1, 62) (up to 0.0078125 allowed)
Greatest relative difference: 0.10498046875 at index (1826, 1, 40) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (1824, 0, 2) (up to 0.0078125 allowed)
Greatest relative difference: 0.1875 at index (1825, 1, 106) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 205


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 2559744 (0.0%)
Greatest absolute difference: 0.03125 at index (1824, 1, 99) (up to 0.0078125 allowed)
Greatest relative difference: 0.40234375 at index (1828, 0, 56) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 393216 (0.0%)
Greatest absolute difference: 0.0107421875 at index (509, 2, 124) (up to 0.0078125 allowed)
Greatest relative difference: 0.09326171875 at index (509, 2, 124) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 4096 (0.0%)
Greatest absolute difference: 0.009765625 at index (8, 0, 103) (up to 0.0078125 allowed)
Greatest relative difference: 0.640625 at index (8, 0, 29) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 4096 (0.1%)
Greatest absolute difference: 0.0185546875 at index (1, 1, 85) (up to 0.0078125 allowed)
Greatest relative difference: 0.384765625 at index (0, 1, 1) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 4096 (0.0%)
Greatest absolute difference: 0.009765625 at index (1, 0, 2) (up to 0.0078125 allowed)
Greatest relative difference: 0.1669921875 at index (1, 0, 2) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 4 / 4096 (0.1%)
Greatest absolute difference: 0.013671875 at index (0, 0, 111) (up to 0.0078125 allowed)
Greatest relative difference: 1.078125 at index (8, 1, 100) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 1895424 (0.0%)
Greatest absolute difference: 0.01171875 at index (2465, 2, 121) (up to 0.0078125 allowed)
Greatest relative difference: 0.0859375 at index (2465, 2, 121) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 4096 (0.1%)
Greatest absolute difference: 0.015625 at index (8, 0, 13) (up to 0.0078125 allowed)
Greatest relative difference: 0.1201171875 at index (7, 0, 66) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 4 / 4096 (0.1%)
Greatest absolute difference: 0.015625 at index (0, 1, 81) (up to 0.0078125 allowed)
Greatest relative difference: 0.11865234375 at index (0, 0, 103) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3,  4],
        [ 8, 12]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 380


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 131072 (0.0%)
Greatest absolute difference: 0.01171875 at index (282, 0, 50) (up to 0.0078125 allowed)
Greatest relative difference: 0.31640625 at index (282, 0, 21) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 380


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 131072 (0.0%)
Greatest absolute difference: 0.01171875 at index (281, 1, 4) (up to 0.0078125 allowed)
Greatest relative difference: 0.044189453125 at index (281, 1, 88) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 131072 (0.0%)
Greatest absolute difference: 0.03125 at index (282, 0, 38) (up to 0.0078125 allowed)
Greatest relative difference: 0.01263427734375 at index (282, 0, 38) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 380


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 1895424 (0.0%)
Greatest absolute difference: 0.01171875 at index (2406, 5, 89) (up to 0.0078125 allowed)
Greatest relative difference: 0.41015625 at index (77, 2, 102) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 131072 (0.0%)
Greatest absolute difference: 0.01171875 at index (25, 0, 58) (up to 0.0078125 allowed)
Greatest relative difference: 0.06982421875 at index (25, 1, 38) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 131072 (0.0%)
Greatest absolute difference: 0.01953125 at index (282, 0, 71) (up to 0.0078125 allowed)
Greatest relative difference: 0.1455078125 at index (26, 0, 126) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 63


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 131072 (0.0%)
Greatest absolute difference: 0.009765625 at index (281, 1, 42) (up to 0.0078125 allowed)
Greatest relative difference: 0.054443359375 at index (281, 1, 42) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 131072 (0.0%)
Greatest absolute difference: 0.01171875 at index (114, 0, 5) (up to 0.0078125 allowed)
Greatest relative difference: 0.58203125 at index (283, 0, 67) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 564


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 4 / 282112 (0.0%)
Greatest absolute difference: 0.015625 at index (501, 1, 50) (up to 0.0078125 allowed)
Greatest relative difference: 0.31640625 at index (502, 1, 66) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 564


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 282112 (0.0%)
Greatest absolute difference: 0.0087890625 at index (502, 0, 38) (up to 0.0078125 allowed)
Greatest relative difference: 0.1083984375 at index (502, 0, 38) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 282112 (0.0%)
Greatest absolute difference: 0.01483154296875 at index (503, 0, 61) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (503, 0, 61) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 564


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 282112 (0.0%)
Greatest absolute difference: 0.010498046875 at index (508, 0, 101) (up to 0.0078125 allowed)
Greatest relative difference: 0.48828125 at index (508, 0, 101) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254],
        [563, 814]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 251


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 282112 (0.0%)
Greatest absolute difference: 0.013671875 at index (563, 0, 25) (up to 0.0078125 allowed)
Greatest relative difference: 2.125 at index (565, 0, 42) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 282112 (0.0%)
Greatest absolute difference: 0.0234375 at index (563, 1, 75) (up to 0.0078125 allowed)
Greatest relative difference: 0.48828125 at index (229, 0, 109) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 1127


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 631808 (0.0%)
Greatest absolute difference: 0.0234375 at index (1004, 1, 110) (up to 0.0078125 allowed)
Greatest relative difference: 0.0201416015625 at index (1004, 1, 110) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 631808 (0.0%)
Greatest absolute difference: 0.015625 at index (1003, 0, 46) (up to 0.0078125 allowed)
Greatest relative difference: 0.333984375 at index (1007, 0, 25) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 1127


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 1895424 (0.0%)
Greatest absolute difference: 0.009765625 at index (2011, 1, 76) (up to 0.0078125 allowed)
Greatest relative difference: 0.1123046875 at index (2011, 1, 76) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 631808 (0.0%)
Greatest absolute difference: 0.03125 at index (1003, 0, 118) (up to 0.0078125 allowed)
Greatest relative difference: 0.05322265625 at index (1003, 0, 38) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 631808 (0.0%)
Greatest absolute difference: 0.0166015625 at index (1003, 0, 118) (up to 0.0078125 allowed)
Greatest relative difference: 0.0986328125 at index (1003, 0, 118) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  508],
        [1126, 1628]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 502


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 631808 (0.0%)
Greatest absolute difference: 0.008544921875 at index (456, 1, 91) (up to 0.0078125 allowed)
Greatest relative difference: 0.349609375 at index (456, 1, 91) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 631808 (0.0%)
Greatest absolute difference: 0.017578125 at index (456, 0, 124) (up to 0.0078125 allowed)
Greatest relative difference: 0.369140625 at index (1128, 1, 13) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 3038


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 1023488 (0.0%)
Greatest absolute difference: 0.01171875 at index (1127, 0, 102) (up to 0.0078125 allowed)
Greatest relative difference: 0.0859375 at index (1127, 1, 114) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 1023488 (0.0%)
Greatest absolute difference: 0.03125 at index (1126, 0, 19) (up to 0.0078125 allowed)
Greatest relative difference: 0.89453125 at index (1126, 1, 46) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  559],
        [3037, 3319]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 282


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 3070464 (0.0%)
Greatest absolute difference: 0.0087890625 at index (2517, 4, 73) (up to 0.0078125 allowed)
Greatest relative difference: 0.169921875 at index (2517, 4, 73) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 1023488 (0.0%)
Greatest absolute difference: 0.01171875 at index (456, 0, 57) (up to 0.0078125 allowed)
Greatest relative difference: 0.07421875 at index (457, 1, 119) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 1023488 (0.0%)
Greatest absolute difference: 0.0166015625 at index (3037, 1, 18) (up to 0.0078125 allowed)
Greatest relative difference: 0.1767578125 at index (458, 0, 80) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3648,  4058],
        [ 9012, 13025]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4013


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 4 / 5119488 (0.0%)
Greatest absolute difference: 0.02001953125 at index (3649, 1, 127) (up to 0.0078125 allowed)
Greatest relative difference: 0.22265625 at index (3649, 1, 127) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 65536 (0.0%)
Greatest absolute difference: 0.013671875 at index (63, 1, 8) (up to 0.0078125 allowed)
Greatest relative difference: 0.15625 at index (63, 0, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 65536 (0.0%)
Greatest absolute difference: 0.013671875 at index (63, 1, 8) (up to 0.0078125 allowed)
Greatest relative difference: 0.15625 at index (63, 0, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 65536 (0.0%)
Greatest absolute difference: 0.013671875 at index (63, 1, 8) (up to 0.0078125 allowed)
Greatest relative difference: 0.15625 at index (63, 0, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 65536 (0.0%)
Greatest absolute difference: 0.013671875 at index (63, 1, 8) (up to 0.0078125 allowed)
Greatest relative difference: 0.15625 at index (63, 0, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 7


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 65536 (0.0%)
Greatest absolute difference: 0.015625 at index (62, 0, 23) (up to 0.0078125 allowed)
Greatest relative difference: 0.59375 at index (63, 1, 72) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 13


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 141056 (0.0%)
Greatest absolute difference: 0.01953125 at index (126, 0, 101) (up to 0.0078125 allowed)
Greatest relative difference: 0.48828125 at index (126, 0, 14) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 13


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 141056 (0.0%)
Greatest absolute difference: 0.01953125 at index (126, 0, 101) (up to 0.0078125 allowed)
Greatest relative difference: 0.48828125 at index (126, 0, 14) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 13


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 1
Tensor-likes are not close!

Mismatched elements: 6 / 141056 (0.0%)
Greatest absolute difference: 0.01953125 at index (126, 0, 101) (up to 0.0078125 allowed)
Greatest relative difference: 0.48828125 at index (126, 0, 14) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 26


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 196608 (0.0%)
Greatest absolute difference: 0.01220703125 at index (24, 3, 93) (up to 0.0078125 allowed)
Greatest relative difference: 0.142578125 at index (24, 3, 60) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.009765625 at index (252, 1, 106) (up to 0.0078125 allowed)
Greatest relative difference: 0.31640625 at index (252, 1, 79) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.015625 at index (253, 0, 12) (up to 0.0078125 allowed)
Greatest relative difference: 0.050048828125 at index (252, 1, 106) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 26


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 423168 (0.0%)
Greatest absolute difference: 0.01220703125 at index (24, 3, 93) (up to 0.0078125 allowed)
Greatest relative difference: 0.142578125 at index (24, 3, 60) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.009765625 at index (252, 1, 106) (up to 0.0078125 allowed)
Greatest relative difference: 0.31640625 at index (252, 1, 79) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.015625 at index (253, 0, 12) (up to 0.0078125 allowed)
Greatest relative difference: 0.050048828125 at index (252, 1, 106) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 26


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 947712 (0.0%)
Greatest absolute difference: 0.01220703125 at index (24, 3, 93) (up to 0.0078125 allowed)
Greatest relative difference: 0.142578125 at index (24, 3, 60) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.009765625 at index (252, 1, 106) (up to 0.0078125 allowed)
Greatest relative difference: 0.31640625 at index (252, 1, 79) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 315904 (0.0%)
Greatest absolute difference: 0.015625 at index (253, 0, 12) (up to 0.0078125 allowed)
Greatest relative difference: 0.050048828125 at index (252, 1, 106) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 26


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 315904 (0.0%)
Greatest absolute difference: 0.009765625 at index (252, 0, 94) (up to 0.0078125 allowed)
Greatest relative difference: 0.040283203125 at index (252, 0, 94) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 1
Tensor-likes are not close!

Mismatched elements: 4 / 315904 (0.0%)
Greatest absolute difference: 0.0133056640625 at index (253, 0, 5) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (253, 0, 104) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 511744 (0.0%)
Greatest absolute difference: 0.017578125 at index (1422, 0, 96) (up to 0.0078125 allowed)
Greatest relative difference: 0.06005859375 at index (1422, 0, 96) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 511744 (0.0%)
Greatest absolute difference: 0.01953125 at index (1422, 1, 103) (up to 0.0078125 allowed)
Greatest relative difference: 0.1162109375 at index (1419, 0, 94) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 511744 (0.0%)
Greatest absolute difference: 0.017578125 at index (1422, 0, 96) (up to 0.0078125 allowed)
Greatest relative difference: 0.06005859375 at index (1422, 0, 96) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 511744 (0.0%)
Greatest absolute difference: 0.01953125 at index (1422, 1, 103) (up to 0.0078125 allowed)
Greatest relative difference: 0.1162109375 at index (1419, 0, 94) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 115


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 511744 (0.0%)
Greatest absolute difference: 0.017578125 at index (1422, 0, 96) (up to 0.0078125 allowed)
Greatest relative difference: 0.06005859375 at index (1422, 0, 96) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 511744 (0.0%)
Greatest absolute difference: 0.01953125 at index (1422, 1, 103) (up to 0.0078125 allowed)
Greatest relative difference: 0.1162109375 at index (1419, 0, 94) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 115


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 2 / 511744 (0.0%)
Greatest absolute difference: 0.01953125 at index (1423, 1, 5) (up to 0.0078125 allowed)
Greatest relative difference: 0.17578125 at index (1423, 0, 14) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (2027, 1, 75) (up to 0.0078125 allowed)
Greatest relative difference: 0.08935546875 at index (2025, 0, 43) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 2559744 (0.0%)
Greatest absolute difference: 0.03125 at index (2028, 1, 73) (up to 0.0078125 allowed)
Greatest relative difference: 0.1455078125 at index (2028, 1, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (2027, 1, 75) (up to 0.0078125 allowed)
Greatest relative difference: 0.08935546875 at index (2025, 0, 43) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 2559744 (0.0%)
Greatest absolute difference: 0.03125 at index (2028, 1, 73) (up to 0.0078125 allowed)
Greatest relative difference: 0.1455078125 at index (2028, 1, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 3 / 2559744 (0.0%)
Greatest absolute difference: 0.015625 at index (2027, 1, 75) (up to 0.0078125 allowed)
Greatest relative difference: 0.08935546875 at index (2025, 0, 43) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 5 / 2559744 (0.0%)
Greatest absolute difference: 0.03125 at index (2028, 1, 73) (up to 0.0078125 allowed)
Greatest relative difference: 0.1455078125 at index (2028, 1, 105) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 205


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 1 / 2559744 (0.0%)
Greatest absolute difference: 0.00927734375 at index (2028, 0, 122) (up to 0.0078125 allowed)
Greatest relative difference: 1.0859375 at index (2028, 0, 122) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 1
Tensor-likes are not close!

Mismatched elements: 4 / 2559744 (0.0%)
Greatest absolute difference: 0.0234375 at index (2028, 0, 112) (up to 0.0078125 allowed)
Greatest relative difference: 0.92578125 at index (2028, 1, 2) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 4096 (0.0%)
Greatest absolute difference: 0.015625 at index (10, 0, 119) (up to 0.0078125 allowed)
Greatest relative difference: 0.0169677734375 at index (10, 0, 119) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 4096 (0.1%)
Greatest absolute difference: 0.0234375 at index (8, 0, 98) (up to 0.0078125 allowed)
Greatest relative difference: 0.2314453125 at index (6, 1, 36) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 4096 (0.2%)
Greatest absolute difference: 0.013671875 at index (8, 0, 64) (up to 0.0078125 allowed)
Greatest relative difference: 0.296875 at index (7, 1, 55) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 1895424 (0.0%)
Greatest absolute difference: 0.015625 at index (6, 4, 35) (up to 0.0078125 allowed)
Greatest relative difference: 0.048828125 at index (6, 4, 35) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 4096 (0.1%)
Greatest absolute difference: 0.01171875 at index (7, 0, 118) (up to 0.0078125 allowed)
Greatest relative difference: 0.1708984375 at index (8, 1, 50) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 4096 (0.1%)
Greatest absolute difference: 0.0234375 at index (8, 0, 36) (up to 0.0078125 allowed)
Greatest relative difference: 0.78125 at index (7, 0, 66) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3,  4],
        [ 8, 12]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 4096 (0.1%)
Greatest absolute difference: 0.015625 at index (11, 0, 64) (up to 0.0078125 allowed)
Greatest relative difference: 0.1572265625 at index (10, 0, 15) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 380


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 5 / 131072 (0.0%)
Greatest absolute difference: 0.0234375 at index (341, 0, 112) (up to 0.0078125 allowed)
Greatest relative difference: 1.4375 at index (342, 1, 99) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 131072 (0.0%)
Greatest absolute difference: 0.008056640625 at index (338, 1, 78) (up to 0.0078125 allowed)
Greatest relative difference: 0.412109375 at index (338, 1, 78) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 380


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 131072 (0.0%)
Greatest absolute difference: 0.01171875 at index (342, 1, 72) (up to 0.0078125 allowed)
Greatest relative difference: 0.040771484375 at index (343, 1, 6) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 380


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 131072 (0.0%)
Greatest absolute difference: 0.0091552734375 at index (404, 0, 27) (up to 0.0078125 allowed)
Greatest relative difference: 1.171875 at index (404, 0, 27) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 8 / 131072 (0.0%)
Greatest absolute difference: 0.017578125 at index (343, 0, 66) (up to 0.0078125 allowed)
Greatest relative difference: 0.12890625 at index (403, 1, 66) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 63


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 131072 (0.0%)
Greatest absolute difference: 0.013671875 at index (343, 1, 1) (up to 0.0078125 allowed)
Greatest relative difference: 0.11865234375 at index (339, 1, 45) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 256, bsz: 2
Tensor-likes are not close!

Mismatched elements: 8 / 131072 (0.0%)
Greatest absolute difference: 0.015625 at index (343, 1, 41) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (339, 1, 40) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 564


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 393216 (0.0%)
Greatest absolute difference: 0.0098876953125 at index (341, 0, 28) (up to 0.0078125 allowed)
Greatest relative difference: 0.66015625 at index (341, 0, 110) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 256, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 282112 (0.0%)
Greatest absolute difference: 0.00927734375 at index (728, 0, 64) (up to 0.0078125 allowed)
Greatest relative difference: 2.375 at index (728, 0, 64) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 564


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 282112 (0.0%)
Greatest absolute difference: 0.015625 at index (728, 0, 50) (up to 0.0078125 allowed)
Greatest relative difference: 0.0888671875 at index (725, 0, 10) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 564


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 282112 (0.0%)
Greatest absolute difference: 0.009765625 at index (726, 1, 15) (up to 0.0078125 allowed)
Greatest relative difference: 0.07373046875 at index (729, 1, 80) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 282112 (0.0%)
Greatest absolute difference: 0.0126953125 at index (729, 1, 20) (up to 0.0078125 allowed)
Greatest relative difference: 2.015625 at index (721, 0, 36) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254],
        [563, 814]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 251


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 551, bsz: 2
Tensor-likes are not close!

Mismatched elements: 7 / 282112 (0.0%)
Greatest absolute difference: 0.015625 at index (253, 0, 115) (up to 0.0078125 allowed)
Greatest relative difference: 0.41015625 at index (813, 0, 54) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 1127


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 3 / 631808 (0.0%)
Greatest absolute difference: 0.015625 at index (1460, 1, 38) (up to 0.0078125 allowed)
Greatest relative difference: 0.10107421875 at index (1460, 1, 90) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 551, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 631808 (0.0%)
Greatest absolute difference: 0.013671875 at index (1453, 0, 107) (up to 0.0078125 allowed)
Greatest relative difference: 0.056884765625 at index (1460, 1, 0) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 1127


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 631808 (0.0%)
Greatest absolute difference: 0.009033203125 at index (1460, 0, 94) (up to 0.0078125 allowed)
Greatest relative difference: 0.201171875 at index (1460, 0, 94) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 631808 (0.0%)
Greatest absolute difference: 0.0234375 at index (1459, 1, 27) (up to 0.0078125 allowed)
Greatest relative difference: inf at index (1459, 0, 48) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  508],
        [1126, 1628]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 502


=========================START=========================
---------------------------Start dq check---------------------------
Failed dq check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 3070464 (0.0%)
Greatest absolute difference: 0.015625 at index (50, 1, 109) (up to 0.0078125 allowed)
Greatest relative difference: 0.01953125 at index (50, 1, 109) (up to 0.0078125 allowed)
---------------------------End dq check---------------------------
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 9 / 631808 (0.0%)
Greatest absolute difference: 0.015625 at index (1627, 0, 34) (up to 0.0078125 allowed)
Greatest relative difference: 0.515625 at index (507, 1, 46) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1234, bsz: 2
Tensor-likes are not close!

Mismatched elements: 4 / 631808 (0.0%)
Greatest absolute difference: 0.01171875 at index (1627, 1, 83) (up to 0.0078125 allowed)
Greatest relative difference: 0.1748046875 at index (1627, 0, 84) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 3038


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 1023488 (0.0%)
Greatest absolute difference: 0.01141357421875 at index (2128, 1, 68) (up to 0.0078125 allowed)
Greatest relative difference: 0.5078125 at index (2128, 1, 68) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1234, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 2 / 1023488 (0.0%)
Greatest absolute difference: 0.0234375 at index (2129, 1, 105) (up to 0.0078125 allowed)
Greatest relative difference: 0.05810546875 at index (2129, 0, 126) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  559],
        [3037, 3319]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 282


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 1023488 (0.0%)
Greatest absolute difference: 0.01123046875 at index (3318, 0, 125) (up to 0.0078125 allowed)
Greatest relative difference: 0.13671875 at index (3318, 0, 125) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 1999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 1023488 (0.0%)
Greatest absolute difference: 0.0234375 at index (558, 1, 102) (up to 0.0078125 allowed)
Greatest relative difference: 0.11181640625 at index (553, 1, 26) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3648,  4058],
        [ 9012, 13025]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4013


=========================START=========================
---------------------------Start dv check---------------------------
Failed dv check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 1999, seqlen_k: 9999, bsz: 2
Tensor-likes are not close!

Mismatched elements: 6 / 5119488 (0.0%)
Greatest absolute difference: 0.013671875 at index (4057, 1, 98) (up to 0.0078125 allowed)
Greatest relative difference: 0.3515625 at index (4057, 1, 111) (up to 0.0078125 allowed)
---------------------------End dv check---------------------------
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 1


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[57, 64]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 7


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 13


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 26


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1309, 1424]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 115


=========================START=========================
=========================END=========================
.q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1824, 2029]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 205


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9


=========================START=========================
---------------------------Start dk check---------------------------
Failed dk check for mha_type: gqa, dtype: torch.bfloat16, seqlen_q: 8, seqlen_k: 8, bsz: 2
Tensor-likes are not close!

Mismatched elements: 1 / 4096 (0.0%)
Greatest absolute difference: 0.0091552734375 at index (5, 0, 13) (up to 0.0078125 allowed)
Greatest relative difference: 0.3984375 at index (5, 0, 13) (up to 0.0078125 allowed)
---------------------------End dk check---------------------------
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 0,  9],
        [ 7, 11]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3,  4],
        [ 8, 12]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 25, 405],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 380


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[114, 127],
        [281, 344]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 63


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 51, 615],
        [501, 730]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 564


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[228, 254],
        [563, 814]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 251


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 1229],
        [1003, 1461]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 1127


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  508],
        [1126, 1628]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 502


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 102, 3140],
        [1126, 2130]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 3038


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 456,  559],
        [3037, 3319]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 282


=========================START=========================
=========================END=========================
.q_ranges: tensor([[ 0,  3],
        [ 3, 16]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 13, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[  0, 114],
        [114, 512]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 398, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  228],
        [ 228, 1102]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 874, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0,  456],
        [ 456, 2468]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[  819,  9832],
        [ 8024, 11682]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2012, max_seqlen_k: 9013


=========================START=========================
=========================END=========================
.q_ranges: tensor([[   0, 2619],
        [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3648,  4058],
        [ 9012, 13025]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4013


=========================START=========================
=========================END=========================
.
=================================== FAILURES ===================================
_____________ test_flex_flash_attn_output[0-1-8-8-128-dtype0-gqa] ______________

seqlen_q = 8, seqlen_k = 8, bsz = 1, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[0, 8]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 8, max_seqlen_k: 1
E           assert (0.0625 < 0.0001 or 0.0625 <= (3 * 0.0))
E            +  where 0.0625 = <built-in method item of Tensor object at 0x7f0f000738e0>()
E            +    where <built-in method item of Tensor object at 0x7f0f000738e0> = tensor(0.0625, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.0625, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00073610>()
E            +        where <built-in method max of Tensor object at 0x7f0f00073610> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f000734d0>()
E            +            where <built-in method abs of Tensor object at 0x7f0f000734d0> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0625 = <built-in method item of Tensor object at 0x7f0f000737a0>()
E            +    where <built-in method item of Tensor object at 0x7f0f000737a0> = tensor(0.0625, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.0625, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00073750>()
E            +        where <built-in method max of Tensor object at 0x7f0f00073750> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00073660>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00073660> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0 = <built-in method item of Tensor object at 0x7f0f00073a20>()
E            +    where <built-in method item of Tensor object at 0x7f0f00073a20> = tensor(0., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00073980>()
E            +        where <built-in method max of Tensor object at 0x7f0f00073980> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00073840>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00073840> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
____________ test_flex_flash_attn_output[0-1-8-256-128-dtype0-gqa] _____________

seqlen_q = 256, seqlen_k = 8, bsz = 1, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[  0, 256]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 256, max_seqlen_k: 1
E           assert (0.25 < 0.0001 or 0.25 <= (3 * 0.0))
E            +  where 0.25 = <built-in method item of Tensor object at 0x7f0f00dc4af0>()
E            +    where <built-in method item of Tensor object at 0x7f0f00dc4af0> = tensor(0.2500, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.2500, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00dc5ae0>()
E            +        where <built-in method max of Tensor object at 0x7f0f00dc5ae0> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00073d90>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00073d90> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.25 = <built-in method item of Tensor object at 0x7f1198d179d0>()
E            +    where <built-in method item of Tensor object at 0x7f1198d179d0> = tensor(0.2500, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.2500, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f1198d17a70>()
E            +        where <built-in method max of Tensor object at 0x7f1198d17a70> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00dc76b0>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00dc76b0> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0 = <built-in method item of Tensor object at 0x7f1198d17520>()
E            +    where <built-in method item of Tensor object at 0x7f1198d17520> = tensor(0., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f1198d17930>()
E            +        where <built-in method max of Tensor object at 0x7f1198d17930> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f1198d17980>()
E            +            where <built-in method abs of Tensor object at 0x7f1198d17980> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
____________ test_flex_flash_attn_output[0-1-8-551-128-dtype0-gqa] _____________

seqlen_q = 551, seqlen_k = 8, bsz = 1, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[  0, 551]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 551, max_seqlen_k: 1
E           assert (0.5 < 0.0001 or 0.5 <= (3 * 0.0))
E            +  where 0.5 = <built-in method item of Tensor object at 0x7f0f00098a50>()
E            +    where <built-in method item of Tensor object at 0x7f0f00098a50> = tensor(0.5000, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.5000, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00098690>()
E            +        where <built-in method max of Tensor object at 0x7f0f00098690> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f000989b0>()
E            +            where <built-in method abs of Tensor object at 0x7f0f000989b0> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.5 = <built-in method item of Tensor object at 0x7f0f000981e0>()
E            +    where <built-in method item of Tensor object at 0x7f0f000981e0> = tensor(0.5000, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.5000, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00098730>()
E            +        where <built-in method max of Tensor object at 0x7f0f00098730> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00098780>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00098780> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0 = <built-in method item of Tensor object at 0x7f0f00098b40>()
E            +    where <built-in method item of Tensor object at 0x7f0f00098b40> = tensor(0., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00098af0>()
E            +        where <built-in method max of Tensor object at 0x7f0f00098af0> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f000982d0>()
E            +            where <built-in method abs of Tensor object at 0x7f0f000982d0> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
____________ test_flex_flash_attn_output[0-1-8-1234-128-dtype0-gqa] ____________

seqlen_q = 1234, seqlen_k = 8, bsz = 1, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[   0, 1234]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1234, max_seqlen_k: 1
E           assert (1.0 < 0.0001 or 1.0 <= (3 * 0.0))
E            +  where 1.0 = <built-in method item of Tensor object at 0x7f0f00099c70>()
E            +    where <built-in method item of Tensor object at 0x7f0f00099c70> = tensor(1., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(1., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00098f50>()
E            +        where <built-in method max of Tensor object at 0x7f0f00098f50> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00099630>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00099630> = (tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n           0.0000e+00,  0.0000e+00],\n         [ 0....0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n           0.0000e+00,  0.0000e+00]]], device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   1.0 = <built-in method item of Tensor object at 0x7f0f000997c0>()
E            +    where <built-in method item of Tensor object at 0x7f0f000997c0> = tensor(1., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(1., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00099770>()
E            +        where <built-in method max of Tensor object at 0x7f0f00099770> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f000992c0>()
E            +            where <built-in method abs of Tensor object at 0x7f0f000992c0> = (tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n           0.0000e+00,  0.0000e+00],\n         [ 0....0000e+00,  0.0000e+00,  ...,  0.0000e+00,\n           0.0000e+00,  0.0000e+00]]], device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0 = <built-in method item of Tensor object at 0x7f0f00099db0>()
E            +    where <built-in method item of Tensor object at 0x7f0f00099db0> = tensor(0., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f0f00099d10>()
E            +        where <built-in method max of Tensor object at 0x7f0f00099d10> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f0f00099860>()
E            +            where <built-in method abs of Tensor object at 0x7f0f00099860> = (tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) - tensor([[[  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000],\n         [  0.0000,   0.0000,   0.0000,  ...    [  0.0000,   0.0000,   0.0000,  ...,   0.0000,   0.0000,   0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
____________ test_flex_flash_attn_output[0-1-8-1999-128-dtype0-gqa] ____________

seqlen_q = 1999, seqlen_k = 8, bsz = 1, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[   0, 1999]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[1, 2]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 1999, max_seqlen_k: 1
E           assert (2.0 < 0.0001 or 2.0 <= (3 * 0.0))
E            +  where 2.0 = <built-in method item of Tensor object at 0x7f13aa4edfe0>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4edfe0> = tensor(2., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(2., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4ee300>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4ee300> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4ee530>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4ee530> = (tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16) - tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   2.0 = <built-in method item of Tensor object at 0x7f13aa4ee120>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4ee120> = tensor(2., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(2., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4ee170>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4ee170> = tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16).max
E            +          where tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.000...0000],\n         [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]]],\n       device='cuda:0', dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4ee2b0>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4ee2b0> = (tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16) - tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16)).abs
E            +  and   0.0 = <built-in method item of Tensor object at 0x7f13aa4ede50>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4ede50> = tensor(0., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4edef0>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4edef0> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4ee080>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4ee080> = (tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16) - tensor([[[   0.0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000],\n         [   0.0000,    0....0000,    0.0000,    0.0000,  ...,    0.0000,    0.0000,\n             0.0000]]], device='cuda:0', dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
____________ test_flex_flash_attn_output[0-2-8-1999-128-dtype0-gqa] ____________

seqlen_q = 1999, seqlen_k = 8, bsz = 2, d = 128, mha_type = 'gqa'
dtype = torch.bfloat16, attn_type = 0

    @pytest.mark.parametrize("mha_type", ["gqa"])
    @pytest.mark.parametrize("dtype", [torch.bfloat16])
    @pytest.mark.parametrize("d", [128])
    @pytest.mark.parametrize("seqlen_q", [8, 256, 551, 1234, 1999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("seqlen_k", [8, 256, 551, 1234, 1999, 9999]) # hang when seqlen is smaller than 7
    @pytest.mark.parametrize("bsz", [1, 2])
    @pytest.mark.parametrize("attn_type", [0, 1, 2,3])
    def test_flex_flash_attn_output(
        seqlen_q,
        seqlen_k,
        bsz,
        d,
        mha_type,
        dtype,
        attn_type
    ):
        device = 'cuda'
        torch.random.manual_seed(42)
    
        q_ranges, k_ranges, max_seqlen_q, max_seqlen_k = generate_qk_ranges(seqlen_q * bsz, seqlen_k * bsz, bsz, device)
    
        # q_ranges = torch.tensor([[  0, 377], [111, 512]], device=device, dtype=torch.int32)
        # k_ranges = torch.tensor([[ 0, 233], [267, 512]], device=device, dtype=torch.int32)
        # max_seqlen_q = 512
        # max_seqlen_k = 256
    
        print(f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}")
        torch.cuda.synchronize()
        torch.cuda.empty_cache()
    
        nheads = 6
        nheads_kv = 6 if mha_type == "mha" else (2 if mha_type == "gqa" else 1)
        q = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype, requires_grad=True)
        k = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        v = torch.randn(bsz * seqlen_k, nheads_kv, d, device=device, dtype=dtype, requires_grad=True)
        g = torch.randn(bsz * seqlen_q, nheads, d, device=device, dtype=dtype)
    
        attn_type_map = torch.zeros(bsz, device=device, dtype=torch.int32) + attn_type
        out, _ = flex_flash_attn_func(q, k, v, q_ranges, k_ranges, max_seqlen_q=max_seqlen_q, max_seqlen_k=max_seqlen_k, attn_type_map=attn_type_map)
        out.backward(g)
        dq, dk, dv = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=True)
        out_ref.backward(g)
        dq_ref, dk_ref, dv_ref = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        out_ref_low_precision = torch_attn_ref(q, k, v, mask=get_mask_from_ranges(q_ranges, k_ranges, attn_type_map, seqlen_q * bsz, seqlen_k * bsz), layout="thd", high_precision=False)
        out_ref_low_precision.backward(g)
        dq_ref_low_precision, dk_ref_low_precision, dv_ref_low_precision = q.grad, k.grad, v.grad
        q.grad, k.grad, v.grad = None, None, None
    
        assert (out - out_ref).abs().max().item() <= 2 * (out_ref_low_precision - out_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
        # print(f"out: {out[:, :, :]}, out_ref: {out_ref[:, :, :]}")
        # print(f"{dq_ref[2633, :, :]=} | {dq[2633, :, :]=}")
        # print(f"{dk_ref[1125, 1, :]=} | {dk[1125, 1, :]=}")
        # print(f"{dv_ref[228 + 5, 1, :]=} | {dv[228 + 5, 1, :]=}")
        # torch.save(dq, "dq.pt")
        assert (dq - dq_ref)[:, :, :].abs().max().item() <= 2 * (dq_ref_low_precision - dq_ref)[:, :, :].abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
    
        if d <= 128:
            assert (dk - dk_ref_low_precision).abs().max().item() < 1e-4 or (dk - dk_ref_low_precision).abs().max().item() <= 3 * (dk_ref_low_precision - dk_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
>           assert (dv - dv_ref_low_precision).abs().max().item() < 1e-4 or (dv - dv_ref_low_precision).abs().max().item() <= 3 * (dv_ref_low_precision - dv_ref).abs().max().item(), f"q_ranges: {q_ranges}, k_ranges: {k_ranges}, max_seqlen_q: {max_seqlen_q}, max_seqlen_k: {max_seqlen_k}"
E           AssertionError: q_ranges: tensor([[   0, 2619],
E                     [2619, 3998]], device='cuda:0', dtype=torch.int32), k_ranges: tensor([[ 3,  4],
E                     [ 8, 12]], device='cuda:0', dtype=torch.int32), max_seqlen_q: 2619, max_seqlen_k: 4
E           assert (1.0 < 0.0001 or 1.0 <= (3 * 0.25))
E            +  where 1.0 = <built-in method item of Tensor object at 0x7f13aa4ed680>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4ed680> = tensor(1., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(1., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4ed900>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4ed900> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4edb30>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4edb30> = (tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) - tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16)).abs
E            +  and   1.0 = <built-in method item of Tensor object at 0x7f13aa4ed540>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4ed540> = tensor(1., device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(1., device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4eca00>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4eca00> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4ed9f0>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4ed9f0> = (tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) - tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16)).abs
E            +  and   0.25 = <built-in method item of Tensor object at 0x7f13aa4a2a80>()
E            +    where <built-in method item of Tensor object at 0x7f13aa4a2a80> = tensor(0.2500, device='cuda:0', dtype=torch.bfloat16).item
E            +      where tensor(0.2500, device='cuda:0', dtype=torch.bfloat16) = <built-in method max of Tensor object at 0x7f13aa4ed090>()
E            +        where <built-in method max of Tensor object at 0x7f13aa4ed090> = tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16).max
E            +          where tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) = <built-in method abs of Tensor object at 0x7f13aa4ed590>()
E            +            where <built-in method abs of Tensor object at 0x7f13aa4ed590> = (tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16) - tensor([[[0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]],\n\n        [[0., 0., 0.,  ..., 0., 0....0., 0., 0.,  ..., 0., 0., 0.],\n         [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0',\n       dtype=torch.bfloat16)).abs

test_flash_attn_ranges.py:214: AssertionError
=========================== short test summary info ============================
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-1-8-8-128-dtype0-gqa]
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-1-8-256-128-dtype0-gqa]
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-1-8-551-128-dtype0-gqa]
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-1-8-1234-128-dtype0-gqa]
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-1-8-1999-128-dtype0-gqa]
FAILED test_flash_attn_ranges.py::test_flex_flash_attn_output[0-2-8-1999-128-dtype0-gqa]
6 failed, 234 passed in 23.60s
